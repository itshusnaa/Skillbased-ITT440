#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8443

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int address_length = sizeof(address);


    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed to create. Please try again.");
        exit(EXIT_FAILURE);
    }



    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);



    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Bind failed. Please try again.");
        exit(EXIT_FAILURE);
    }



    if (listen(server_fd, 3) < 0) {
        perror("Listen for incoming connections..");
        exit(EXIT_FAILURE);
    }


printf("Server is listening on port %d...\n", PORT);

    srand(time(0));

    while (1) {

        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&address_length)) < 0) {
            perror("Accept the new connection.");
            exit(EXIT_FAILURE);
        }


        int rdm_number = rand() % 900 + 100;


        send(new_socket, &rdm_number, sizeof(rdm_number), 0);

        printf("Random number sent to the client is: %d\n", rdm_number);


        close(new_socket);
        }

        return 0;

}
